> mmusSPL.seurat <- make.object(data.name = "mmusSPL", data.dir = "./", dirty.trick = T)
setting min.cells =  3 
setting min.features =  200 
setting percent.mt =  5 
1/3) loading data...  applying dirty trick for non-human data done 
2/3) preparing the Seurat object, mitochondrial removal for non-human data might fail... 2/3) preparing the Seurat object... Warning: The default method for RunUMAP has changed from calling Python UMAP via reticulate to the R-native UWOT using the cosine metric
To use Python UMAP via reticulate, set umap.method to 'umap-learn' and metric to 'correlation'
This message will be shown once per session
done 
3/3) exporting the Seurat object... done 
> 
> mmusSPL.out <- matricom(seurat.obj = mmusSPL.seurat, group.column = "seurat_clusters")
(1/9) loading matRicom objects... done 
(2/9) evaluating active matrisome genes in cells... done 
(3/9) evaluating matrisome receptor genes in target population(s)... done 
(4/9) extracting potential matrisome ligands based on receptors... 
no cell-specific pair was found, execution stops 

try changing the min.pct or the expr.filter parameter 
Error in matricom(seurat.obj = mmusSPL.seurat, group.column = "seurat_clusters") : 
  
> filter.finder(seurat.obj = mmusSPL.seurat, group.column = "seurat_clusters")
> mmusSPL.out <- matricom(seurat.obj = mmusSPL.seurat, group.column = "seurat_clusters", min.pct = 0.15, expr.filter = 0.5)
(1/9) loading matRicom objects... done 
(2/9) evaluating active matrisome genes in cells... done 
(3/9) evaluating matrisome receptor genes in target population(s)... done 
(4/9) extracting potential matrisome ligands based on receptors... done 
(5/9) creating population-specific response geneset(s)...done 
(6/9) testing potential ligand(s) against response genesets (clipping of ligands might occurr if > max.ligands)... done 
(7/9) forming triplets (clipping of targets might occurr if > max.targets)... done 
(8/9) finding explainable paths... done 
(9/9) scaling the results to [0,1] and annotating... done 
 
> write.csv(mmusSPL.out, file="mmusSPL.csv", row.names = F, quote = F)
> 
> flowgraph(result.obj = mmusSPL.out)
> 
> netgraph(result.obj = mmusSPL.out)
no population chosen, picking a random one 
no ECM component chosen, picking a random one 
> 
> annograph(result.obj = mmusSPL.out)
> 
